/**
 * syscall.ul
 * Copyright (C) Paul Passeron
 * Unilang Standard Library - Syscall
 * Paul Passeron <paul.passeron2@gmail.com>
**/

@include "string.ul"


/**
 * write - write syscall, writes 'count' bytes from
 *         'buf' to 'fd' file descriptor
 * @param fd: file descriptor to write bytes to
 * @param buf: buffer containing chars to write
 * @param count: number of bytes to write from 'buf'
 * @returns the number of bytes successfully written
            to 'fd'
**/
let syswrite(fd: i32, buf: cstr, count: u64): i64 => {
  return syscall3(1, fd, buf, count);
}

/**
 * sysread - read syscall, reads 'count' bytes from
 *        'fd' file descriptor
 * @param fd: file descriptor to write bytes to
 * @param count: number of bytes to write from 'buf'
 * @returns: the string of length 'count' read from 'fd' 
**/
let sysread(fd: i32, count: u64): string => {
  let s: string => new_string(count);
  let actual_count : i32 => syscall3(0, fd, s.contents, count);
  if  actual_count != count => {
    print("SYSREAD FAILED ! Expected count: ");
    print_num(count);
    print(" vs ");
    print_num(actual_count);
    println("");
  }
  return s; 
}

let sysopen(filename: string, flags: u32, mode: u32): u32 => {
  return syscall3(2, string_to_cstr(filename), flags, mode);
}

let sysclose(fd: u32): void => {
  syscall1(3, fd);
}

let syscreate(filename: string, mode: u32): u32 => {
  return syscall2(85, filename.contents, mode);
}

let sysstat(path: string, s: stat): u32 => {
  return syscall2(4, path.contents, s);
}

// let sysfstat(fd: i32, s: stat): u32 => {
//   return syscall2(fd, s);
// }
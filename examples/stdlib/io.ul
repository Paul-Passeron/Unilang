/**
 * io.ul
 * Copyright (C) Paul Passeron
 * Unilang Standard Library Input/Output 
 * Paul Passeron <paul.passeron2@gmail.com>
**/

@include "syscalls.ul"

/**
 * putchar - Prints a char on the standard output
 * @param c: The char to print
 * @return: void
**/
let putchar(c: char): void => {
  write(1, string_to_cstr(char_to_string(c)), 1);
}

/**
 * print - Prints a string on the standard output
 * @param s: The string to print
 * @return: void
**/
let print(s: string): void => {
  write(1, s.contents, s.length);
}

/**
 * print_num - Prints a number on the standard output
 * @param n: The numnber to print
 * @return: void
**/
let print_num(n: i32): void => {
  if( n < 0) => {
    putchar('-');
    n => 0-n;
  }
  let a: i32 => n / 10;
  if (a != 0) =>  {
    print_num(a);
  }
  putchar(n%10 + '0');
}

/**
 * println - Prints a string with a new line at the end
 * @param s: the string to print
 * @return: void
**/
let println(s: string): void => {
  print(s);
  putchar(10);
}

/**
 * File struct, used as a handle when dealing with files
**/
struct file => {
  fd: u64,
  mode: i8,
}

/**
 * open_file - Opens a file and returns its handle
 * @param path: the path to the file
 * @param flag: the flags to open the file, this defines the behavior of the returned handle
 * @return: the file handle (file)
**/
let open_file(path: string, flags: u32): file => {
  let fd: i32 => open(path, flags, 1877);
  let res: file;
  res.fd => fd;
  res.mode => flags;
  return res;
}

/**
 * fprint - Prints a string to a file
 * @param file: the handle of the file
 * @param s: the string to print
 * @return: void
**/
let fprint(f: file, s: string): void => {
  write(f.fd, s.contents, s.length);
}

/**
 * close_file - Closes a file
 * @param file: the handle of the file
 * @return: void
**/
let close_file(f: file): void => {
  close(f.fd);
}
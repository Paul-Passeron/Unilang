/**
 * io.ul
 * Copyright (C) Paul Passeron
 * Unilang Standard Library Input/Output 
 * Paul Passeron <paul.passeron2@gmail.com>
**/

@include "syscalls.ul"
@include "string.ul"

/**
 * putchar - Prints a char on the standard output
 * @param c: The char to print
 * @return: void
**/
let putchar(c: char): void => {
  syswrite(1, string_to_cstr(char_to_string(c)), 1);
}

/**
 * print - Prints a string on the standard output
 * @param s: The string to print
 * @return: void
**/
let print(s: string): void => {
  syswrite(1, s.contents, s.length);
}

/**
 * print_num - Prints a number on the standard output
 * @param n: The numnber to print
 * @return: void
**/
let print_num(n: i32): void => {
  if (n < 0) => {
    putchar('-');
    n => 0-n;
  }
  let a: i32 => n / 10;
  if (a != 0) =>  {
    print_num(a);
  }
  putchar(n % 10 + '0');
}

/**
 * println - Prints a string with a new line at the end
 * @param s: the string to print
 * @return: void
**/
let println(s: string): void => {
  print(s);
  putchar(10);
}


let o_wronly: i32 => 1;
let o_creat: i32 => 64;


/**
 * File struct, used as a handle when dealing with files
**/
struct file => {
  fd: u64,
  mode: i8,
  is_valid: bool,

  /**
  * open - Opens file
  * @param path: the path to the file
  * @param flag: the flags to open the file, this defines the behavior of the returned handle
  * @return: void
  **/
  let open(path: string, omode: string): void => {
    this.is_valid => 1;
    if omode == "w" => {
      let mode: i32 => 0644;
      this.fd => syscreate(path, mode);
      if this.fd >= 0 => {
        let flags: i32 => o_wronly | o_creat;
        this.fd => sysopen(path, flags, mode);
        if this.fd < 0 => {
          this.is_valid => 0;
          println("Error opening file \'" + path + "\'");
        }
      }
      else {
        this.is_valid => 0;
        println("Error creating file \'" + path + "\'");
      }
    } else if omode == "r" => {
      this.is_valid => 0;
      println("File reading is not implemented yet\n");
    } else {
      this.is_valid => 0;
      println("Invalide file opening mode " + omode);
    } 
  },

  /**
  * close - Closes file
  * @return: void
  **/
  let close() : void => {
    if this.is_valid =>
      sysclose(this.fd);
  },


  /**
  * print - Prints a string to the file
  * @param s: the string to print
  * @return: void
  **/
  let print(s: string): void => {
    if this.is_valid =>
      syswrite(this.fd, s.contents, s.length);
  }

}





